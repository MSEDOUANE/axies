{"ast":null,"code":"/* global BigInt */\nimport _, { forEach } from 'lodash';\nimport bodyParts from \"./body-parts.json\";\nimport binarytraits from \"./traitmapping.json\";\nimport fetch from 'node-fetch';\nimport { parse } from 'json2csv';\nconst observerConfig = {\n  attributes: false,\n  childList: true,\n  subtree: true\n};\nconst colorMap = {\n  \"plant\": \"rgb(108, 192, 0)\",\n  \"reptile\": \"rgb(200, 138, 224)\",\n  \"beast\": \"rgb(255, 184, 18)\",\n  \"aquatic\": \"rgb(0, 184, 206)\",\n  \"bird\": \"rgb(255, 139, 189)\",\n  \"bug\": \"rgb(255, 83, 65)\"\n};\nconst classGeneMap = {\n  \"0000\": \"beast\",\n  \"0001\": \"bug\",\n  \"0010\": \"bird\",\n  \"0011\": \"plant\",\n  \"0100\": \"aquatic\",\n  \"0101\": \"reptile\",\n  \"1000\": \"???\",\n  \"1001\": \"???\",\n  \"1010\": \"???\"\n};\nconst typeOrder = {\n  \"patternColor\": 1,\n  \"eyes\": 2,\n  \"mouth\": 3,\n  \"ears\": 4,\n  \"horn\": 5,\n  \"back\": 6,\n  \"tail\": 7\n};\nconst geneColorMap = {\n  \"0000\": {\n    \"0010\": \"ffec51\",\n    \"0011\": \"ffa12a\",\n    \"0100\": \"f0c66e\",\n    \"0110\": \"60afce\"\n  },\n  \"0001\": {\n    \"0010\": \"ff7183\",\n    \"0011\": \"ff6d61\",\n    \"0100\": \"f74e4e\"\n  },\n  \"0010\": {\n    \"0010\": \"ff9ab8\",\n    \"0011\": \"ffb4bb\",\n    \"0100\": \"ff778e\"\n  },\n  \"0011\": {\n    \"0010\": \"ccef5e\",\n    \"0011\": \"efd636\",\n    \"0100\": \"c5ffd9\"\n  },\n  \"0100\": {\n    \"0010\": \"4cffdf\",\n    \"0011\": \"2de8f2\",\n    \"0100\": \"759edb\",\n    \"0110\": \"ff5a71\"\n  },\n  \"0101\": {\n    \"0010\": \"fdbcff\",\n    \"0011\": \"ef93ff\",\n    \"0100\": \"f5e1ff\",\n    \"0110\": \"43e27d\"\n  },\n  //nut hidden_1\n  \"1000\": {\n    \"0010\": \"D9D9D9\",\n    \"0011\": \"D9D9D9\",\n    \"0100\": \"D9D9D9\",\n    \"0110\": \"D9D9D9\"\n  },\n  //star hidden_2\n  \"1001\": {\n    \"0010\": \"D9D9D9\",\n    \"0011\": \"D9D9D9\",\n    \"0100\": \"D9D9D9\",\n    \"0110\": \"D9D9D9\"\n  },\n  //moon hidden_3\n  \"1010\": {\n    \"0010\": \"D9D9D9\",\n    \"0011\": \"D9D9D9\",\n    \"0100\": \"D9D9D9\",\n    \"0110\": \"D9D9D9\"\n  }\n};\nconst PROBABILITIES = {\n  d: 0.375,\n  r1: 0.09375,\n  r2: 0.03125\n};\nconst parts = [\"eyes\", \"mouth\", \"ears\", \"horn\", \"back\", \"tail\"];\nconst MAX_QUALITY = 6 * (PROBABILITIES.d + PROBABILITIES.r1 + PROBABILITIES.r2);\nconst MAX_RUN_RETRIES = 30;\nconst OPTIONS_MAP = {\n  \"class\": \"classes\",\n  \"part\": \"parts\",\n  \"bodyShape\": \"bodyShapes\",\n  \"stage\": \"stages\",\n  \"mystic\": \"numMystic\"\n};\nconst SEARCH_PARAMS = [\"class\", \"stage\", \"breedCount\", \"mystic\", \"pureness\", \"region\", \"title\", \"part\", \"bodyShape\", \"hp\", \"speed\", \"skill\", \"morale\"];\nvar axies = {},\n    totalAxies = 0,\n    axiesList = [];\nexport var convert = function (data) {\n  const fields = ['id', 'class', 'name', 'class', 'stage', 'breedCount', {\n    value: 'auction.currentPriceUSD',\n    label: 'price'\n  }, {\n    value: 'traits.eyes.d.name',\n    label: \"D-EYES\"\n  }, {\n    value: 'traits.eyes.r1.name',\n    label: \"R1-EYES\"\n  }, {\n    value: 'traits.eyes.r2.name',\n    label: \"R2-EYES\"\n  }, {\n    value: 'traits.ears.d.name',\n    label: \"D-Ears\"\n  }, {\n    value: 'traits.ears.r1.name',\n    label: \"R1-Ears\"\n  }, {\n    value: 'traits.ears.r2.name',\n    label: \"R2-Ears\"\n  }, {\n    value: 'traits.back.d.name',\n    label: \"D-Back\"\n  }, {\n    value: 'traits.back.r1.name',\n    label: \"R1-Back\"\n  }, {\n    value: 'traits.back.r2.name',\n    label: \"R2-Back\"\n  }, {\n    value: 'traits.mouth.d.name',\n    label: \"D-Mouth\"\n  }, {\n    value: 'traits.mouth.r1.name',\n    label: \"R1-Mouth\"\n  }, {\n    value: 'traits.mouth.r2.name',\n    label: \"R2-Mouth\"\n  }, {\n    value: 'traits.horn.d.name',\n    label: \"D-Horn\"\n  }, {\n    value: 'traits.horn.r1.name',\n    label: \"R1-Horn\"\n  }, {\n    value: 'traits.horn.r2.name',\n    label: \"R2-Horn\"\n  }, {\n    value: 'traits.tail.d.name',\n    label: \"D-Tail\"\n  }, {\n    value: 'traits.tail.r1.name',\n    label: \"R1-Tail\"\n  }, {\n    value: 'traits.tail.r2.name',\n    label: \"R2-Tail\"\n  }, {\n    value: 'stats.hp',\n    label: \"Health\"\n  }, {\n    value: 'stats.skill',\n    label: \"Skill\"\n  }, {\n    value: 'stats.morale',\n    label: \"Morale\"\n  }, {\n    value: 'stats.speed',\n    label: \"Speed\"\n  }];\n  const opts = {\n    fields\n  };\n  var csv = parse(data, opts); // Lodash, currently included viÂ©a a script, is required for this line to work\n\n  var downloadLink = document.createElement(\"a\");\n  var blob = new Blob([\"\\ufeff\", csv]);\n  var url = URL.createObjectURL(blob);\n  downloadLink.href = url;\n  downloadLink.text = \"click\";\n  downloadLink.download = \"DataDump.csv\"; //Name the file here\n\n  document.body.appendChild(downloadLink);\n  downloadLink.click();\n  downloadLink.remove();\n  return csv; // var xls = json2xls(data);\n  // fs.writeFileSync(filename, xls, 'binary', (err) =>\n  // {\n  //     if (err)\n  //     {\n  //         console.log(\"writeFileSync :\", err);\n  //     }\n  //     console.log(filename + \" file is saved!\");\n  // });\n};\n\nfunction flatten(data) {\n  var result = {};\n\n  function recurse(cur, prop) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      for (var i = 0, l = cur.length; i < l; i++) {\n        recurse(cur[i], prop + \"/\" + i + \"/\");\n      }\n\n      if (l == 0) result[prop] = [];\n    } else {\n      var isEmpty = true;\n\n      for (var p in cur) {\n        isEmpty = false;\n        recurse(cur[p], prop ? prop + \".\" + p : p);\n      }\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\nexport async function getAxieBriefListTotal(address, page, sort, auctionType, criteria, bodyParts) {\n  //Assume we are at 24 axies per page\n  if (page < 1) page = 1;\n  let from = (page - 1) * 100;\n  let formattedAddress = address;\n\n  if (formattedAddress != null) {\n    formattedAddress = \"\\\"\" + address + \"\\\"\";\n  }\n\n  await fetch(\"https://axieinfinity.com/graphql-server-v2/graphql?r=freak\", {\n    \"headers\": {\n      \"content-type\": \"application/json\"\n    },\n    \"body\": \"{\\\"operationName\\\":\\\"GetAxieBriefList\\\",\\\"variables\\\":{\\\"from\\\":\" + from + \",\\\"size\\\":100,\\\"sort\\\":\\\"\" + sort + \"\\\",\\\"auctionType\\\":\\\"\" + auctionType + \"\\\",\\\"owner\\\":\" + formattedAddress + \",\\\"criteria\\\":\" + JSON.stringify(criteria) + \"},\\\"query\\\":\\\"query GetAxieBriefList($auctionType: AuctionType, $criteria: AxieSearchCriteria, $from: Int, $sort: SortBy, $size: Int, $owner: String) {\\\\n  axies(auctionType: $auctionType, criteria: $criteria, from: $from, sort: $sort, size: $size, owner: $owner) {\\\\n    total\\\\n    results {\\\\n      ...AxieBrief\\\\n      __typename\\\\n    }\\\\n    __typename\\\\n  }\\\\n}\\\\n\\\\nfragment AxieBrief on Axie {\\\\n  id\\\\n  genes\\\\n  owner\\\\n  name\\\\n  stage\\\\n  class\\\\n  breedCount\\\\n  image\\\\n  title\\\\n  stats {\\\\n    ...AxieStats\\\\n    __typename\\\\n  }\\\\n  battleInfo {\\\\n    banned\\\\n    __typename\\\\n  }\\\\n  auction {\\\\n    currentPrice\\\\n    currentPriceUSD\\\\n    __typename\\\\n  }\\\\n  parts {\\\\n    id\\\\n    name\\\\n    class\\\\n    type\\\\n    specialGenes\\\\n    __typename\\\\n  }\\\\n  __typename\\\\n}\\\\nfragment AxieStats on AxieStats {\\\\n  hp\\\\n  speed\\\\n  skill\\\\n  morale\\\\n  __typename\\\\n}\\\\n\\\\n\\\"}\",\n    \"method\": \"POST\"\n  }).then(response => {\n    response.json().then(result => {\n      totalAxies = result.data.axies.total;\n      return totalAxies;\n    });\n  });\n}\nexport async function getAxieBriefList(address, page, sort, auctionType, criteria, bp) {\n  //Assume we are at 24 axies per page\n  if (page < 1) page = 1;\n  let from = (page - 1) * 100;\n  let formattedAddress = address;\n\n  if (formattedAddress != null) {\n    formattedAddress = \"\\\"\" + address + \"\\\"\";\n  }\n\n  bodyParts = bp;\n  let r = await fetch(\"https://axieinfinity.com/graphql-server-v2/graphql?r=freak\", {\n    \"headers\": {\n      \"content-type\": \"application/json\"\n    },\n    \"body\": \"{\\\"operationName\\\":\\\"GetAxieBriefList\\\",\\\"variables\\\":{\\\"from\\\":\" + from + \",\\\"size\\\":100,\\\"sort\\\":\\\"\" + sort + \"\\\",\\\"auctionType\\\":\\\"\" + auctionType + \"\\\",\\\"owner\\\":\" + formattedAddress + \",\\\"criteria\\\":\" + JSON.stringify(criteria) + \"},\\\"query\\\":\\\"query GetAxieBriefList($auctionType: AuctionType, $criteria: AxieSearchCriteria, $from: Int, $sort: SortBy, $size: Int, $owner: String) {\\\\n  axies(auctionType: $auctionType, criteria: $criteria, from: $from, sort: $sort, size: $size, owner: $owner) {\\\\n    total\\\\n    results {\\\\n      ...AxieBrief\\\\n      __typename\\\\n    }\\\\n    __typename\\\\n  }\\\\n}\\\\n\\\\nfragment AxieBrief on Axie {\\\\n  id\\\\n  genes\\\\n  owner\\\\n  name\\\\n  stage\\\\n  class\\\\n  breedCount\\\\n  image\\\\n  title\\\\n  stats {\\\\n    ...AxieStats\\\\n    __typename\\\\n  }\\\\n  battleInfo {\\\\n    banned\\\\n    __typename\\\\n  }\\\\n  auction {\\\\n    currentPrice\\\\n    currentPriceUSD\\\\n    __typename\\\\n  }\\\\n  parts {\\\\n    id\\\\n    name\\\\n    class\\\\n    type\\\\n    specialGenes\\\\n    __typename\\\\n  }\\\\n  __typename\\\\n}\\\\nfragment AxieStats on AxieStats {\\\\n  hp\\\\n  speed\\\\n  skill\\\\n  morale\\\\n  __typename\\\\n}\\\\n\\\\n\\\"}\",\n    \"method\": \"POST\"\n  }).then(response => {\n    return response.json();\n  }).then(result => {\n    let results = result.data.axies.results,\n        flattenAxiesaxies = [],\n        flattenAxies = [];\n\n    for (let i = 0; i < results.length; i++) {\n      let axie = results[i];\n      let id = axie.id;\n      axies[id] = axie;\n\n      if (axie.stage > 2) {\n        axies[id].genes = genesToBin(BigInt(axies[id].genes));\n        let traits = getTraits(axies[id].genes);\n        let qp = getQualityAndPureness(traits, axies[id].class.toLowerCase());\n        axies[id].traits = traits;\n        axies[id].quality = qp.quality;\n        axies[id].pureness = qp.pureness;\n      }\n    }\n\n    results.forEach(e => {\n      flattenAxies.push(flatten(e));\n    });\n    console.log(JSON.stringify(flattenAxies.slice(2)));\n    return flattenAxies;\n  }).catch(error => {\n    console.log(error);\n  });\n  return r;\n}\n\nfunction genesToBin(genes) {\n  var genesString = genes.toString(2);\n  genesString = strMul(\"0\", 256 - genesString.length) + genesString;\n  return genesString;\n}\n\nfunction getTraits(genes) {\n  var groups = [genes.slice(0, 32), genes.slice(32, 64), genes.slice(64, 96), genes.slice(96, 128), genes.slice(128, 160), genes.slice(160, 192), genes.slice(192, 224), genes.slice(224, 256)];\n  let cls = getClassFromGroup(groups[0]);\n  let region = getRegionFromGroup(groups[0]);\n  let pattern = getPatternsFromGroup(groups[1]);\n  let color = getColorsFromGroup(groups[1], groups[0].slice(0, 4));\n  let eyes = getPartsFromGroup(\"eyes\", groups[2], region);\n  let mouth = getPartsFromGroup(\"mouth\", groups[3], region);\n  let ears = getPartsFromGroup(\"ears\", groups[4], region);\n  let horn = getPartsFromGroup(\"horn\", groups[5], region);\n  let back = getPartsFromGroup(\"back\", groups[6], region);\n  let tail = getPartsFromGroup(\"tail\", groups[7], region);\n  return {\n    cls: cls,\n    region: region,\n    pattern: pattern,\n    color: color,\n    eyes: eyes,\n    mouth: mouth,\n    ears: ears,\n    horn: horn,\n    back: back,\n    tail: tail\n  };\n}\n\nconst regionGeneMap = {\n  \"00000\": \"global\",\n  \"00001\": \"japan\"\n};\n\nfunction getRegionFromGroup(group) {\n  let regionBin = group.slice(8, 13);\n\n  if (regionBin in regionGeneMap) {\n    return regionGeneMap[regionBin];\n  }\n\n  return \"Unknown Region\";\n}\n\nfunction getClassFromGroup(group) {\n  let bin = group.slice(0, 4);\n\n  if (!(bin in classGeneMap)) {\n    return \"Unknown Class\";\n  }\n\n  return classGeneMap[bin];\n}\n\nfunction getPatternsFromGroup(group) {\n  //patterns could be 6 bits. use 4 for now\n  return {\n    d: group.slice(2, 8),\n    r1: group.slice(8, 14),\n    r2: group.slice(14, 20)\n  };\n}\n\nfunction getColor(bin, cls) {\n  let color;\n\n  if (bin == \"0000\") {\n    color = \"ffffff\";\n  } else if (bin == \"0001\") {\n    color = \"7a6767\";\n  } else {\n    color = geneColorMap[cls][bin];\n  }\n\n  return color;\n}\n\nfunction getColorsFromGroup(group, cls) {\n  return {\n    d: getColor(group.slice(20, 24), cls),\n    r1: getColor(group.slice(24, 28), cls),\n    r2: getColor(group.slice(28, 32), cls)\n  };\n} //hack. key: part name + \" \" + part type\n\n\nvar partsClassMap = {};\n\nfunction getPartName(cls, part, region, binary, skinBinary = \"00\") {\n  let trait;\n\n  if (binary in binarytraits[cls][part]) {\n    if (skinBinary == \"11\") {\n      trait = binarytraits[cls][part][binary][\"mystic\"];\n    } else if (skinBinary == \"10\") {\n      trait = binarytraits[cls][part][binary][\"xmas\"];\n    } else if (region in binarytraits[cls][part][binary]) {\n      trait = binarytraits[cls][part][binary][region];\n    } else if (\"global\" in binarytraits[cls][part][binary]) {\n      trait = binarytraits[cls][part][binary][\"global\"];\n    } else {\n      trait = \"UNKNOWN Regional \" + cls + \" \" + part;\n    }\n  } else {\n    trait = \"UNKNOWN \" + cls + \" \" + part;\n  } //return part + \"-\" + trait.toLowerCase().replace(/\\s/g, \"-\");\n\n\n  partsClassMap[trait + \" \" + part] = cls;\n  return trait;\n}\n\nfunction getPartsFromGroup(part, group, region) {\n  let skinBinary = group.slice(0, 2);\n  let mystic = skinBinary == \"11\";\n  let dClass = classGeneMap[group.slice(2, 6)];\n  let dBin = group.slice(6, 12);\n  let dName = getPartName(dClass, part, region, dBin, skinBinary);\n  let r1Class = classGeneMap[group.slice(12, 16)];\n  let r1Bin = group.slice(16, 22);\n  let r1Name = getPartName(r1Class, part, region, r1Bin);\n  let r2Class = classGeneMap[group.slice(22, 26)];\n  let r2Bin = group.slice(26, 32);\n  let r2Name = getPartName(r2Class, part, region, r2Bin);\n  return {\n    d: getPartFromName(part, dName),\n    r1: getPartFromName(part, r1Name),\n    r2: getPartFromName(part, r2Name),\n    mystic: mystic\n  };\n}\n\nfunction getPartFromName(traitType, partName) {\n  let traitId = traitType.toLowerCase() + \"-\" + partName.toLowerCase().replace(/\\s/g, \"-\").replace(/[\\?'\\.]/g, \"\");\n  return bodyPartsMap[traitId];\n}\n\nvar bodyPartsMap = {};\nexport async function getBodyParts() {\n  console.log(\"Failed to get body parts from the API\"); //API is unreliable. fall back to hard-coded local copy.\n\n  let parts = bodyParts;\n\n  for (let i in parts) {\n    bodyPartsMap[parts[i].partId] = parts[i];\n  }\n\n  for (let i in parts) {\n    bodyPartsMap[parts[i].partId] = parts[i];\n  }\n\n  return bodyParts;\n}\n\nfunction getQualityAndPureness(traits, cls) {\n  let quality = 0;\n  let dPureness = 0;\n\n  for (let i in parts) {\n    if (traits[parts[i]].d.class == cls) {\n      quality += PROBABILITIES.d;\n      dPureness++;\n    }\n\n    if (traits[parts[i]].r1.class == cls) {\n      quality += PROBABILITIES.r1;\n    }\n\n    if (traits[parts[i]].r2.class == cls) {\n      quality += PROBABILITIES.r2;\n    }\n  }\n\n  return {\n    quality: quality / MAX_QUALITY,\n    pureness: dPureness\n  };\n}\n\nfunction strMul(str, num) {\n  var s = \"\";\n\n  for (var i = 0; i < num; i++) {\n    s += str;\n  }\n\n  return s;\n}\n\nfunction getAxieInfoMarket(id) {\n  fetch(\"https://axieinfinity.com/graphql-server-v2/graphql?r=freak\", {\n    \"headers\": {\n      \"content-type\": \"application/json\"\n    },\n    \"body\": \"{\\\"operationName\\\":\\\"GetAxieDetail\\\",\\\"variables\\\":{\\\"axieId\\\":\\\"\" + parseInt(id) + \"\\\"},\\\"query\\\":\\\"query GetAxieDetail($axieId: ID!) {\\\\n  axie(axieId: $axieId) {\\\\n    ...AxieDetail\\\\n    __typename\\\\n  }\\\\n}\\\\n\\\\nfragment AxieDetail on Axie {\\\\n  id\\\\n  name\\\\n  genes\\\\n  owner\\\\n  birthDate\\\\n  bodyShape\\\\n  class\\\\n  sireId\\\\n  sireClass\\\\n  matronId\\\\n  matronClass\\\\n  stage\\\\n  title\\\\n  breedCount\\\\n  level\\\\n  figure {\\\\n    atlas\\\\n    model\\\\n    image\\\\n    __typename\\\\n  }\\\\n  parts {\\\\n    ...AxiePart\\\\n    __typename\\\\n  }\\\\n  stats {\\\\n    ...AxieStats\\\\n    __typename\\\\n  }\\\\n  auction {\\\\n    ...AxieAuction\\\\n    __typename\\\\n  }\\\\n  ownerProfile {\\\\n    name\\\\n    __typename\\\\n  }\\\\n  children {\\\\n    id\\\\n    name\\\\n    class\\\\n    image\\\\n    title\\\\n    stage\\\\n    __typename\\\\n  }\\\\n  __typename\\\\n}\\\\n\\\\nfragment AxiePart on AxiePart {\\\\n  id\\\\n  name\\\\n  class\\\\n  type\\\\n  stage\\\\n  abilities {\\\\n    ...AxieCardAbility\\\\n    __typename\\\\n  }\\\\n  __typename\\\\n}\\\\n\\\\nfragment AxieCardAbility on AxieCardAbility {\\\\n  id\\\\n  name\\\\n  attack\\\\n  defense\\\\n  energy\\\\n  description\\\\n  backgroundUrl\\\\n  effectIconUrl\\\\n  __typename\\\\n}\\\\n\\\\nfragment AxieStats on AxieStats {\\\\n  hp\\\\n  speed\\\\n  skill\\\\n  morale\\\\n  __typename\\\\n}\\\\n\\\\nfragment AxieAuction on Auction {\\\\n  startingPrice\\\\n  endingPrice\\\\n  startingTimestamp\\\\n  endingTimestamp\\\\n  duration\\\\n  timeLeft\\\\n  currentPrice\\\\n  currentPriceUSD\\\\n  suggestedPrice\\\\n  seller\\\\n  listingIndex\\\\n  __typename\\\\n}\\\\n\\\"}\",\n    \"method\": \"POST\"\n  }).then(response => {\n    response.json().then(result => {\n      console.log(result);\n      let axie = result.data.axie; //axie.pendingExp = axie.battleInfo.pendingExp;\n\n      console.log(JSON.stringify(axie));\n    });\n  }).catch(error => {\n    console.log(error);\n  });\n}","map":{"version":3,"sources":["/Users/pc/Desktop/axies-react/src/axies.js"],"names":["_","forEach","bodyParts","binarytraits","fetch","parse","observerConfig","attributes","childList","subtree","colorMap","classGeneMap","typeOrder","geneColorMap","PROBABILITIES","d","r1","r2","parts","MAX_QUALITY","MAX_RUN_RETRIES","OPTIONS_MAP","SEARCH_PARAMS","axies","totalAxies","axiesList","convert","data","fields","value","label","opts","csv","downloadLink","document","createElement","blob","Blob","url","URL","createObjectURL","href","text","download","body","appendChild","click","remove","flatten","result","recurse","cur","prop","Object","Array","isArray","i","l","length","isEmpty","p","getAxieBriefListTotal","address","page","sort","auctionType","criteria","from","formattedAddress","JSON","stringify","then","response","json","total","getAxieBriefList","bp","r","results","flattenAxiesaxies","flattenAxies","axie","id","stage","genes","genesToBin","BigInt","traits","getTraits","qp","getQualityAndPureness","class","toLowerCase","quality","pureness","e","push","console","log","slice","catch","error","genesString","toString","strMul","groups","cls","getClassFromGroup","region","getRegionFromGroup","pattern","getPatternsFromGroup","color","getColorsFromGroup","eyes","getPartsFromGroup","mouth","ears","horn","back","tail","regionGeneMap","group","regionBin","bin","getColor","partsClassMap","getPartName","part","binary","skinBinary","trait","mystic","dClass","dBin","dName","r1Class","r1Bin","r1Name","r2Class","r2Bin","r2Name","getPartFromName","traitType","partName","traitId","replace","bodyPartsMap","getBodyParts","partId","dPureness","str","num","s","getAxieInfoMarket","parseInt"],"mappings":"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","sourcesContent":["/* global BigInt */\n\nimport _, { forEach } from 'lodash';\nimport bodyParts from \"./body-parts.json\";\nimport binarytraits from \"./traitmapping.json\";\nimport fetch from 'node-fetch';\nimport { parse } from 'json2csv';\n\nconst observerConfig = { attributes: false, childList: true, subtree: true };\nconst colorMap = {\n\t\"plant\": \"rgb(108, 192, 0)\",\n\t\"reptile\": \"rgb(200, 138, 224)\",\n\t\"beast\": \"rgb(255, 184, 18)\",\n\t\"aquatic\": \"rgb(0, 184, 206)\",\n\t\"bird\": \"rgb(255, 139, 189)\",\n\t\"bug\": \"rgb(255, 83, 65)\"\n}\nconst classGeneMap = { \"0000\": \"beast\", \"0001\": \"bug\", \"0010\": \"bird\", \"0011\": \"plant\", \"0100\": \"aquatic\", \"0101\": \"reptile\", \"1000\": \"???\", \"1001\": \"???\", \"1010\": \"???\" };\nconst typeOrder = { \"patternColor\": 1, \"eyes\": 2, \"mouth\": 3, \"ears\": 4, \"horn\": 5, \"back\": 6, \"tail\": 7 };\nconst geneColorMap = {\n\t\"0000\": { \"0010\": \"ffec51\", \"0011\": \"ffa12a\", \"0100\": \"f0c66e\", \"0110\": \"60afce\" },\n\t\"0001\": { \"0010\": \"ff7183\", \"0011\": \"ff6d61\", \"0100\": \"f74e4e\", },\n\t\"0010\": { \"0010\": \"ff9ab8\", \"0011\": \"ffb4bb\", \"0100\": \"ff778e\" },\n\t\"0011\": { \"0010\": \"ccef5e\", \"0011\": \"efd636\", \"0100\": \"c5ffd9\" },\n\t\"0100\": { \"0010\": \"4cffdf\", \"0011\": \"2de8f2\", \"0100\": \"759edb\", \"0110\": \"ff5a71\" },\n\t\"0101\": { \"0010\": \"fdbcff\", \"0011\": \"ef93ff\", \"0100\": \"f5e1ff\", \"0110\": \"43e27d\" },\n\t//nut hidden_1\n\t\"1000\": { \"0010\": \"D9D9D9\", \"0011\": \"D9D9D9\", \"0100\": \"D9D9D9\", \"0110\": \"D9D9D9\" },\n\t//star hidden_2\n\t\"1001\": { \"0010\": \"D9D9D9\", \"0011\": \"D9D9D9\", \"0100\": \"D9D9D9\", \"0110\": \"D9D9D9\" },\n\t//moon hidden_3\n\t\"1010\": { \"0010\": \"D9D9D9\", \"0011\": \"D9D9D9\", \"0100\": \"D9D9D9\", \"0110\": \"D9D9D9\" }\n};\nconst PROBABILITIES = { d: 0.375, r1: 0.09375, r2: 0.03125 };\nconst parts = [\"eyes\", \"mouth\", \"ears\", \"horn\", \"back\", \"tail\"];\nconst MAX_QUALITY = 6 * (PROBABILITIES.d + PROBABILITIES.r1 + PROBABILITIES.r2);\nconst MAX_RUN_RETRIES = 30;\nconst OPTIONS_MAP = { \"class\": \"classes\", \"part\": \"parts\", \"bodyShape\": \"bodyShapes\", \"stage\": \"stages\", \"mystic\": \"numMystic\" };\nconst SEARCH_PARAMS = [\"class\", \"stage\", \"breedCount\", \"mystic\", \"pureness\", \"region\", \"title\", \"part\", \"bodyShape\", \"hp\", \"speed\", \"skill\", \"morale\"];\nvar axies = {}, totalAxies = 0, axiesList = [];\n\nexport var convert = function (data)\n{\n\n\tconst fields = ['id',\n\t\t'class',\n\t\t'name',\n\t\t'class',\n\t\t'stage',\n\t\t'breedCount',\n\t\t{ value: 'auction.currentPriceUSD', label: 'price' },\n\t\t{ value: 'traits.eyes.d.name', label: \"D-EYES\" },\n\t\t{ value: 'traits.eyes.r1.name', label: \"R1-EYES\" },\n\t\t{ value: 'traits.eyes.r2.name', label: \"R2-EYES\" },\n\t\t{ value: 'traits.ears.d.name', label: \"D-Ears\" },\n\t\t{ value: 'traits.ears.r1.name', label: \"R1-Ears\" },\n\t\t{ value: 'traits.ears.r2.name', label: \"R2-Ears\" },\n\t\t{ value: 'traits.back.d.name', label: \"D-Back\" },\n\t\t{ value: 'traits.back.r1.name', label: \"R1-Back\" },\n\t\t{ value: 'traits.back.r2.name', label: \"R2-Back\" },\n\t\t{ value: 'traits.mouth.d.name', label: \"D-Mouth\" },\n\t\t{ value: 'traits.mouth.r1.name', label: \"R1-Mouth\" },\n\t\t{ value: 'traits.mouth.r2.name', label: \"R2-Mouth\" },\n\t\t{ value: 'traits.horn.d.name', label: \"D-Horn\" },\n\t\t{ value: 'traits.horn.r1.name', label: \"R1-Horn\" },\n\t\t{ value: 'traits.horn.r2.name', label: \"R2-Horn\" },\n\t\t{ value: 'traits.tail.d.name', label: \"D-Tail\" },\n\t\t{ value: 'traits.tail.r1.name', label: \"R1-Tail\" },\n\t\t{ value: 'traits.tail.r2.name', label: \"R2-Tail\" },\n\t\t{ value: 'stats.hp', label: \"Health\" },\n\t\t{ value: 'stats.skill', label: \"Skill\" },\n\t\t{ value: 'stats.morale', label: \"Morale\" },\n\t\t{ value: 'stats.speed', label: \"Speed\" },\n\t];\n\tconst opts = { fields };\n\tvar csv = parse(data, opts);\n\t// Lodash, currently included viÂ©a a script, is required for this line to work\n\tvar downloadLink = document.createElement(\"a\");\n\tvar blob = new Blob([\"\\ufeff\", csv]);\n\tvar url = URL.createObjectURL(blob);\n\tdownloadLink.href = url;\n\tdownloadLink.text = \"click\"\n\tdownloadLink.download = \"DataDump.csv\";  //Name the file here\n\tdocument.body.appendChild(downloadLink);\n\tdownloadLink.click();\n\tdownloadLink.remove();\n\treturn csv;\n\t// var xls = json2xls(data);\n\t// fs.writeFileSync(filename, xls, 'binary', (err) =>\n\t// {\n\t//     if (err)\n\t//     {\n\t//         console.log(\"writeFileSync :\", err);\n\t//     }\n\t//     console.log(filename + \" file is saved!\");\n\t// });\n}\n\nfunction flatten(data)\n{\n\tvar result = {};\n\tfunction recurse(cur, prop)\n\t{\n\t\tif (Object(cur) !== cur)\n\t\t{\n\t\t\tresult[prop] = cur;\n\t\t} else if (Array.isArray(cur))\n\t\t{\n\t\t\tfor (var i = 0, l = cur.length; i < l; i++)\n\t\t\t{\n\t\t\t\trecurse(cur[i], prop + \"/\" + i + \"/\");\n\t\t\t}\n\t\t\tif (l == 0)\n\t\t\t\tresult[prop] = [];\n\t\t} else\n\t\t{\n\t\t\tvar isEmpty = true;\n\t\t\tfor (var p in cur)\n\t\t\t{\n\t\t\t\tisEmpty = false;\n\t\t\t\trecurse(cur[p], prop ? prop + \".\" + p : p);\n\t\t\t}\n\t\t\tif (isEmpty && prop)\n\t\t\t\tresult[prop] = {};\n\t\t}\n\t}\n\trecurse(data, \"\");\n\treturn result;\n}\n\n\n\n\nexport async function getAxieBriefListTotal(address, page, sort, auctionType, criteria, bodyParts)\n{\n\t//Assume we are at 24 axies per page\n\tif (page < 1) page = 1;\n\tlet from = (page - 1) * 100;\n\tlet formattedAddress = address;\n\tif (formattedAddress != null)\n\t{\n\t\tformattedAddress = \"\\\"\" + address + \"\\\"\";\n\t}\n\t\n\tawait fetch(\"https://axieinfinity.com/graphql-server-v2/graphql?r=freak\", {\n\t\t\"headers\": { \"content-type\": \"application/json\" },\n\t\t\"body\": \"{\\\"operationName\\\":\\\"GetAxieBriefList\\\",\\\"variables\\\":{\\\"from\\\":\" + from + \",\\\"size\\\":100,\\\"sort\\\":\\\"\" + sort + \"\\\",\\\"auctionType\\\":\\\"\" + auctionType + \"\\\",\\\"owner\\\":\" + formattedAddress + \",\\\"criteria\\\":\" + JSON.stringify(criteria) + \"},\\\"query\\\":\\\"query GetAxieBriefList($auctionType: AuctionType, $criteria: AxieSearchCriteria, $from: Int, $sort: SortBy, $size: Int, $owner: String) {\\\\n  axies(auctionType: $auctionType, criteria: $criteria, from: $from, sort: $sort, size: $size, owner: $owner) {\\\\n    total\\\\n    results {\\\\n      ...AxieBrief\\\\n      __typename\\\\n    }\\\\n    __typename\\\\n  }\\\\n}\\\\n\\\\nfragment AxieBrief on Axie {\\\\n  id\\\\n  genes\\\\n  owner\\\\n  name\\\\n  stage\\\\n  class\\\\n  breedCount\\\\n  image\\\\n  title\\\\n  stats {\\\\n    ...AxieStats\\\\n    __typename\\\\n  }\\\\n  battleInfo {\\\\n    banned\\\\n    __typename\\\\n  }\\\\n  auction {\\\\n    currentPrice\\\\n    currentPriceUSD\\\\n    __typename\\\\n  }\\\\n  parts {\\\\n    id\\\\n    name\\\\n    class\\\\n    type\\\\n    specialGenes\\\\n    __typename\\\\n  }\\\\n  __typename\\\\n}\\\\nfragment AxieStats on AxieStats {\\\\n  hp\\\\n  speed\\\\n  skill\\\\n  morale\\\\n  __typename\\\\n}\\\\n\\\\n\\\"}\",\n\t\t\"method\": \"POST\"\n\t})\n\t\t.then(response =>\n\t\t{\n\t\t\tresponse.json().then(result =>\n\t\t\t{\n\t\t\t\ttotalAxies = result.data.axies.total;\n\t\t\t\treturn totalAxies;\n\t\t\t});\n\t\t});\n}\n\n\nexport async function getAxieBriefList(address, page, sort, auctionType, criteria, bp)\n{\n\t//Assume we are at 24 axies per page\n\tif (page < 1) page = 1;\n\tlet from = (page - 1) * 100;\n\tlet formattedAddress = address;\n\tif (formattedAddress != null)\n\t{\n\t\tformattedAddress = \"\\\"\" + address + \"\\\"\";\n\t}\n\tbodyParts =bp;\n\tlet r = await fetch(\"https://axieinfinity.com/graphql-server-v2/graphql?r=freak\", {\n\t\t\"headers\": { \"content-type\": \"application/json\" },\n\t\t\"body\": \"{\\\"operationName\\\":\\\"GetAxieBriefList\\\",\\\"variables\\\":{\\\"from\\\":\" + from + \",\\\"size\\\":100,\\\"sort\\\":\\\"\" + sort + \"\\\",\\\"auctionType\\\":\\\"\" + auctionType + \"\\\",\\\"owner\\\":\" + formattedAddress + \",\\\"criteria\\\":\" + JSON.stringify(criteria) + \"},\\\"query\\\":\\\"query GetAxieBriefList($auctionType: AuctionType, $criteria: AxieSearchCriteria, $from: Int, $sort: SortBy, $size: Int, $owner: String) {\\\\n  axies(auctionType: $auctionType, criteria: $criteria, from: $from, sort: $sort, size: $size, owner: $owner) {\\\\n    total\\\\n    results {\\\\n      ...AxieBrief\\\\n      __typename\\\\n    }\\\\n    __typename\\\\n  }\\\\n}\\\\n\\\\nfragment AxieBrief on Axie {\\\\n  id\\\\n  genes\\\\n  owner\\\\n  name\\\\n  stage\\\\n  class\\\\n  breedCount\\\\n  image\\\\n  title\\\\n  stats {\\\\n    ...AxieStats\\\\n    __typename\\\\n  }\\\\n  battleInfo {\\\\n    banned\\\\n    __typename\\\\n  }\\\\n  auction {\\\\n    currentPrice\\\\n    currentPriceUSD\\\\n    __typename\\\\n  }\\\\n  parts {\\\\n    id\\\\n    name\\\\n    class\\\\n    type\\\\n    specialGenes\\\\n    __typename\\\\n  }\\\\n  __typename\\\\n}\\\\nfragment AxieStats on AxieStats {\\\\n  hp\\\\n  speed\\\\n  skill\\\\n  morale\\\\n  __typename\\\\n}\\\\n\\\\n\\\"}\",\n\t\t\"method\": \"POST\"\n\t})\n\t\t.then(response =>\n\t\t{\n\t\t\treturn response.json();\n\t\t}).then(result =>\n\t\t{\n\t\t\tlet results = result.data.axies.results, flattenAxiesaxies = [], flattenAxies = [];\n\t\t\tfor (let i = 0; i < results.length; i++)\n\t\t\t{\n\t\t\t\tlet axie = results[i];\n\t\t\t\tlet id = axie.id;\n\t\t\t\taxies[id] = axie;\n\t\t\t\tif (axie.stage > 2)\n\t\t\t\t{\n\t\t\t\t\taxies[id].genes = genesToBin(BigInt(axies[id].genes));\n\t\t\t\t\tlet traits = getTraits(axies[id].genes);\n\t\t\t\t\tlet qp = getQualityAndPureness(traits, axies[id].class.toLowerCase());\n\t\t\t\t\taxies[id].traits = traits;\n\t\t\t\t\taxies[id].quality = qp.quality;\n\t\t\t\t\taxies[id].pureness = qp.pureness;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresults.forEach(e =>\n\t\t\t{\n\t\t\t\tflattenAxies.push(flatten(e));\n\t\t\t});\n\t\t\tconsole.log(JSON.stringify(flattenAxies.slice(2)));\n\t\t\treturn flattenAxies;\n\t\t})\n\t\t.catch(error =>\n\t\t{\n\t\t\tconsole.log(error);\n\t\t});\n\treturn r;\n}\nfunction genesToBin(genes)\n{\n\tvar genesString = genes.toString(2);\n\tgenesString = strMul(\"0\", 256 - genesString.length) + genesString\n\treturn genesString;\n}\nfunction getTraits(genes)\n{\n\tvar groups = [genes.slice(0, 32), genes.slice(32, 64), genes.slice(64, 96), genes.slice(96, 128), genes.slice(128, 160), genes.slice(160, 192), genes.slice(192, 224), genes.slice(224, 256)];\n\tlet cls = getClassFromGroup(groups[0]);\n\tlet region = getRegionFromGroup(groups[0]);\n\tlet pattern = getPatternsFromGroup(groups[1]);\n\tlet color = getColorsFromGroup(groups[1], groups[0].slice(0, 4));\n\tlet eyes = getPartsFromGroup(\"eyes\", groups[2], region);\n\tlet mouth = getPartsFromGroup(\"mouth\", groups[3], region);\n\tlet ears = getPartsFromGroup(\"ears\", groups[4], region);\n\tlet horn = getPartsFromGroup(\"horn\", groups[5], region);\n\tlet back = getPartsFromGroup(\"back\", groups[6], region);\n\tlet tail = getPartsFromGroup(\"tail\", groups[7], region);\n\treturn { cls: cls, region: region, pattern: pattern, color: color, eyes: eyes, mouth: mouth, ears: ears, horn: horn, back: back, tail: tail };\n}\nconst regionGeneMap = { \"00000\": \"global\", \"00001\": \"japan\" };\nfunction getRegionFromGroup(group)\n{\n\tlet regionBin = group.slice(8, 13);\n\tif (regionBin in regionGeneMap)\n\t{\n\t\treturn regionGeneMap[regionBin];\n\t}\n\treturn \"Unknown Region\";\n}\n\nfunction getClassFromGroup(group)\n{\n\tlet bin = group.slice(0, 4);\n\tif (!(bin in classGeneMap))\n\t{\n\t\treturn \"Unknown Class\";\n\t}\n\treturn classGeneMap[bin];\n}\n\nfunction getPatternsFromGroup(group)\n{\n\t//patterns could be 6 bits. use 4 for now\n\treturn { d: group.slice(2, 8), r1: group.slice(8, 14), r2: group.slice(14, 20) };\n}\n\nfunction getColor(bin, cls)\n{\n\tlet color;\n\tif (bin == \"0000\")\n\t{\n\t\tcolor = \"ffffff\";\n\t} else if (bin == \"0001\")\n\t{\n\t\tcolor = \"7a6767\";\n\t} else\n\t{\n\t\tcolor = geneColorMap[cls][bin];\n\t}\n\treturn color;\n}\n\nfunction getColorsFromGroup(group, cls)\n{\n\treturn { d: getColor(group.slice(20, 24), cls), r1: getColor(group.slice(24, 28), cls), r2: getColor(group.slice(28, 32), cls) };\n}\n\n//hack. key: part name + \" \" + part type\nvar partsClassMap = {};\nfunction getPartName(cls, part, region, binary, skinBinary = \"00\")\n{\n\tlet trait;\n\tif (binary in binarytraits[cls][part])\n\t{\n\t\tif (skinBinary == \"11\")\n\t\t{\n\t\t\ttrait = binarytraits[cls][part][binary][\"mystic\"];\n\t\t} else if (skinBinary == \"10\")\n\t\t{\n\t\t\ttrait = binarytraits[cls][part][binary][\"xmas\"];\n\t\t} else if (region in binarytraits[cls][part][binary])\n\t\t{\n\t\t\ttrait = binarytraits[cls][part][binary][region];\n\t\t} else if (\"global\" in binarytraits[cls][part][binary])\n\t\t{\n\t\t\ttrait = binarytraits[cls][part][binary][\"global\"];\n\t\t} else\n\t\t{\n\t\t\ttrait = \"UNKNOWN Regional \" + cls + \" \" + part;\n\t\t}\n\t} else\n\t{\n\t\ttrait = \"UNKNOWN \" + cls + \" \" + part;\n\t}\n\t//return part + \"-\" + trait.toLowerCase().replace(/\\s/g, \"-\");\n\tpartsClassMap[trait + \" \" + part] = cls;\n\treturn trait;\n}\n\nfunction getPartsFromGroup(part, group, region,)\n{\n\tlet skinBinary = group.slice(0, 2);\n\tlet mystic = skinBinary == \"11\";\n\tlet dClass = classGeneMap[group.slice(2, 6)];\n\tlet dBin = group.slice(6, 12);\n\tlet dName = getPartName(dClass, part, region, dBin, skinBinary);\n\n\tlet r1Class = classGeneMap[group.slice(12, 16)];\n\tlet r1Bin = group.slice(16, 22);\n\tlet r1Name = getPartName(r1Class, part, region, r1Bin);\n\n\tlet r2Class = classGeneMap[group.slice(22, 26)];\n\tlet r2Bin = group.slice(26, 32);\n\tlet r2Name = getPartName(r2Class, part, region, r2Bin);\n\n\treturn { d: getPartFromName(part, dName), r1: getPartFromName(part, r1Name), r2: getPartFromName(part, r2Name), mystic: mystic };\n}\nfunction getPartFromName(traitType, partName)\n{\n\tlet traitId = traitType.toLowerCase() + \"-\" + partName.toLowerCase().replace(/\\s/g, \"-\").replace(/[\\?'\\.]/g, \"\");\n\treturn bodyPartsMap[traitId];\n}\n\nvar bodyPartsMap = {};\nexport async function getBodyParts()\n{\n\n\tconsole.log(\"Failed to get body parts from the API\");\n\t//API is unreliable. fall back to hard-coded local copy.\n\tlet parts = bodyParts;\n\tfor (let i in parts)\n\t{\n\t\tbodyPartsMap[parts[i].partId] = parts[i];\n\t}\n\tfor (let i in parts)\n\t{\n\t\tbodyPartsMap[parts[i].partId] = parts[i];\n\t}\n\treturn bodyParts;\n}\n\nfunction getQualityAndPureness(traits, cls)\n{\n\tlet quality = 0;\n\tlet dPureness = 0;\n\tfor (let i in parts)\n\t{\n\t\tif (traits[parts[i]].d.class == cls)\n\t\t{\n\t\t\tquality += PROBABILITIES.d;\n\t\t\tdPureness++;\n\t\t}\n\t\tif (traits[parts[i]].r1.class == cls)\n\t\t{\n\t\t\tquality += PROBABILITIES.r1;\n\t\t}\n\t\tif (traits[parts[i]].r2.class == cls)\n\t\t{\n\t\t\tquality += PROBABILITIES.r2;\n\t\t}\n\t}\n\treturn { quality: quality / MAX_QUALITY, pureness: dPureness };\n}\nfunction strMul(str, num)\n{\n\tvar s = \"\";\n\tfor (var i = 0; i < num; i++)\n\t{\n\t\ts += str;\n\t}\n\treturn s;\n}\n\nfunction getAxieInfoMarket(id)\n{\n\tfetch(\"https://axieinfinity.com/graphql-server-v2/graphql?r=freak\", { \"headers\": { \"content-type\": \"application/json\" }, \"body\": \"{\\\"operationName\\\":\\\"GetAxieDetail\\\",\\\"variables\\\":{\\\"axieId\\\":\\\"\" + parseInt(id) + \"\\\"},\\\"query\\\":\\\"query GetAxieDetail($axieId: ID!) {\\\\n  axie(axieId: $axieId) {\\\\n    ...AxieDetail\\\\n    __typename\\\\n  }\\\\n}\\\\n\\\\nfragment AxieDetail on Axie {\\\\n  id\\\\n  name\\\\n  genes\\\\n  owner\\\\n  birthDate\\\\n  bodyShape\\\\n  class\\\\n  sireId\\\\n  sireClass\\\\n  matronId\\\\n  matronClass\\\\n  stage\\\\n  title\\\\n  breedCount\\\\n  level\\\\n  figure {\\\\n    atlas\\\\n    model\\\\n    image\\\\n    __typename\\\\n  }\\\\n  parts {\\\\n    ...AxiePart\\\\n    __typename\\\\n  }\\\\n  stats {\\\\n    ...AxieStats\\\\n    __typename\\\\n  }\\\\n  auction {\\\\n    ...AxieAuction\\\\n    __typename\\\\n  }\\\\n  ownerProfile {\\\\n    name\\\\n    __typename\\\\n  }\\\\n  children {\\\\n    id\\\\n    name\\\\n    class\\\\n    image\\\\n    title\\\\n    stage\\\\n    __typename\\\\n  }\\\\n  __typename\\\\n}\\\\n\\\\nfragment AxiePart on AxiePart {\\\\n  id\\\\n  name\\\\n  class\\\\n  type\\\\n  stage\\\\n  abilities {\\\\n    ...AxieCardAbility\\\\n    __typename\\\\n  }\\\\n  __typename\\\\n}\\\\n\\\\nfragment AxieCardAbility on AxieCardAbility {\\\\n  id\\\\n  name\\\\n  attack\\\\n  defense\\\\n  energy\\\\n  description\\\\n  backgroundUrl\\\\n  effectIconUrl\\\\n  __typename\\\\n}\\\\n\\\\nfragment AxieStats on AxieStats {\\\\n  hp\\\\n  speed\\\\n  skill\\\\n  morale\\\\n  __typename\\\\n}\\\\n\\\\nfragment AxieAuction on Auction {\\\\n  startingPrice\\\\n  endingPrice\\\\n  startingTimestamp\\\\n  endingTimestamp\\\\n  duration\\\\n  timeLeft\\\\n  currentPrice\\\\n  currentPriceUSD\\\\n  suggestedPrice\\\\n  seller\\\\n  listingIndex\\\\n  __typename\\\\n}\\\\n\\\"}\", \"method\": \"POST\" })\n\t\t.then(response =>\n\t\t{\n\t\t\tresponse.json().then(result =>\n\t\t\t{\n\t\t\t\tconsole.log(result);\n\t\t\t\tlet axie = result.data.axie;\n\t\t\t\t//axie.pendingExp = axie.battleInfo.pendingExp;\n\t\t\t\tconsole.log(JSON.stringify(axie));\n\n\t\t\t});\n\t\t})\n\t\t.catch(error =>\n\t\t{\n\t\t\tconsole.log(error);\n\t\t});\n}\n\n"]},"metadata":{},"sourceType":"module"}